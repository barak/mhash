libmhash:

Libmhash is a library which implements some hash algorithms like
crc32, md5 and sha-1.
To use libmhash in your program include mhash.h, the file is found
in the lib/ directory. 
This file defines these algorithms:

# define CRC32 0
# define MD5 1 
# define SHA1 2

Also these functions:

* Misc functions:

int get_block_size(int algorithm);
 Returns the block size of the given algorithm in bytes.
 Algorithm is one of the above.

* Initialization Functions:

int init_mhash(const int algorithm);
 Starts hash mode, and returns a thread descriptor (it has
 nothing to do with the posix threads). 
 Returns (-1) on error.


* Hash Functions:

int mhash(int thread, void *plaintext, int len);

 Using the thread descriptor you can now use these functions. len is the
 length in bytes of the plaintext, 
 You must have used init_hash to use these functions.



* Freeing Memory functions:

void* end_mhash(int td);
 Finishes (so it clears memory) encryption/decryption for the given
 thread descriptor. Returns a pointer to the hash value (it's size
 is given with the get_block_size(algorithm) function).


* The init_mhash function is re-entrant. If the pthread library is
 found in your system libmcrypt uses pthread_mutex lockings to local
 variables.


An example program which hashes stdin using md5 is:

#include <mhash.h>
#include <stdio.h>
#include <stdlib.h>

main() {

  int td, i;
  unsigned char buffer;
  unsigned char *hash;
      
  td=init_mhash(MD5);
          
  while ( fread(&buffer, 1, 1, stdin)==1 ) {
      mhash (td, &buffer, 1);
  }

  hash=end_mhash(td);

  printf ("Hash:");
  for (i=0; i<get_block_size(MD5); i++) {
   printf ("%.2x", hash[i]);
  }
  printf ("\n");
  
  return 0;

}
